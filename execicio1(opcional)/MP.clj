;;; Douglas Janovik Maliszewski
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use '[clojure.string])
(use '[clojure.java.io])
(import java.util.ArrayList)

;Maquina de Pilha
(defn MP  [a array number]
	(if (starts-with? a "PUSH ") 
		(do (def b(replace-first a "PUSH " ""))
			(if (starts-with? b "1") 
				(do 
					(if (starts-with? b "1\n") 
						(do 
							(def c(replace-first b "1\n" ""))
							(def number1(str number 1))
							(.add array number1)
							(MP c array nil)
						)
						(do 
							(def c(replace-first b "1" "PUSH "))
							(def number1(str number 1))
							(MP c array number1)
						)
					)
				)
				(if (starts-with? b "2") 
					(do 
						(if (starts-with? b "2\n") 
							(do 
								(def c(replace-first b "2\n" ""))
								(def number1(str number 2))
								(.add array number1)
								(MP c array nil)
							)
							(do 
								(def c(replace-first b "2" "PUSH "))
								(def number1(str number 2))
								(MP c array number1)
							)
						)
					)
					(if (starts-with? b "3") 
						(do 
							(if (starts-with? b "3\n") 
								(do 
									(def c(replace-first b "3\n" ""))
									(def number1(str number 3))
									(.add array number1)
									(MP c array nil)
								)
								(do 
									(def c(replace-first b "3" "PUSH "))
									(def number1(str number 3))
									(MP c array number1)
								)
							)
						)
						(if (starts-with? b "4") 
							(do 
								(if (starts-with? b "4\n") 
									(do 
										(def c(replace-first b "4\n" ""))
										(def number1(str number 4))
										(.add array number1)
										(MP c array nil)
									)
									(do 
										(def c(replace-first b "4" "PUSH "))
										(def number1(str number 4))
										(MP c array number1)
									)
								)
							)
							(if (starts-with? b "5") 
								(do 
									(if (starts-with? b "5\n") 
										(do 
											(def c(replace-first b "5\n" ""))
											(def number1(str number 5))
											(.add array number1)
											(MP c array nil)
										)
										(do 
											(def c(replace-first b "5" "PUSH "))
											(def number1(str number 5))
											(MP c array number1)
										)
									)
								)
								(if (starts-with? b "6") 
									(do 
										(if (starts-with? b "6\n") 
											(do 
												(def c(replace-first b "6\n" ""))
												(def number1(str number 6))
												(.add array number1)
												(MP c array nil)
											)
											(do 
												(def c(replace-first b "6" "PUSH "))
												(def number1(str number 6))
												(MP c array number1)
											)
										)
									)
									(if (starts-with? b "7") 
										(do 
											(if (starts-with? b "7\n") 
												(do 
													(def c(replace-first b "7\n" ""))
													(def number1(str number 7))
													(.add array number1)
													(MP c array nil)
												)
												(do 
													(def c(replace-first b "7" "PUSH "))
													(def number1(str number 7))
													(MP c array number1)
												)
											)
										)
										(if (starts-with? b "8") 
											(do 
												(if (starts-with? b "8\n") 
													(do 
														(def c(replace-first b "8\n" ""))
														(def number1(str number 8))
														(.add array number1)
														(MP c array nil)
													)
													(do 
														(def c(replace-first b "8" "PUSH "))
														(def number1(str number 8))
														(MP c array number1)
													)
												)
											)
											(if (starts-with? b "9") 
												(do 
													(if (starts-with? b "9\n") 
														(do 
															(def c(replace-first b "9\n" ""))
															(def number1(str number 9))
															(.add array number1)
															(MP c array nil)
														)
														(do 
															(def c(replace-first b "9" "PUSH "))
															(def number1(str number 9))
															(MP c array number1)
														)
													)
												)
												(if (starts-with? b "0") 
													(do 
														(if (starts-with? b "0\n") 
															(do 
																(def c(replace-first b "0\n" ""))
																(def number1(str number 0))
																(.add array number1)
																(MP c array nil)
															)
															(do 
																(def c(replace-first b "0" "PUSH "))
																(def number1(str number 0))
																(MP c array number1)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(def d (replace-first a "\n" ""))
	(if (starts-with? d "SUM") 
			(do
				(def newArray (new java.util.ArrayList) )
				(def s1 ( - (.size array) 2) )
				(def s2 ( - (.size array) 1) )
				(def soma1( read-string(.get array s2 )) )
				(def soma2( read-string (.get array s1 )) )
				(def resultado ( + soma1 soma2 ) )
				(.add newArray (str resultado))
				(doseq [n (range (-(.size array) 2))]
						(.add newArray (.get array n))
				)
				(.add newArray (str resultado))
				(def c(replace-first d "SUM" ""))
				(MP c newArray nil)
			)
			(if (starts-with? d "MULT") 
				(do
					(def newArray (new java.util.ArrayList) )
					(def s1 ( - (.size array) 2) )
					(def s2 ( - (.size array) 1) )
					(def soma1( read-string(.get array s2 )) )
					(def soma2( read-string(.get array s1 )) )
					(def resultado ( * soma1 soma2 ) )
					(doseq [n (range(-(.size array)2))]
						(.add newArray (.get array n))
					)
					(.add newArray (str resultado))
					(def c(replace-first d "MULT" ""))
					(MP c newArray nil)
				)

				(if (starts-with? d "PRINT") 
					(do
						(println(.get array (- (.size array) 1)) )
						(def c(replace-first d "PRINT" ""))
						(MP c array nil)
					)

					(if (starts-with? d "DIV") 
						(do
							(def newArray (new java.util.ArrayList) )
							(def s1 ( - (.size array) 2) )
							(def s2 ( - (.size array) 1) )
							(def soma1( read-string(.get array s2 )) )
							(def soma2( read-string(.get array s1 )) )
							(def resultado ( / soma2 soma1 ) )
							(doseq [n (range(-(.size array)2))]
								(.add newArray (.get array n))
							)
							(.add newArray (str resultado))
							(def c(replace-first d "DIV" ""))
							(MP c newArray nil)
						)
						(if (starts-with? d "SUB") 
							(do
								(def newArray (new java.util.ArrayList) )
								(def s1 ( - (.size array) 2) )
								(def s2 ( - (.size array) 1) )
								(def soma1( read-string(.get array s2 )) )
								(def soma2( read-string(.get array s1 )) )
								(def resultado ( - soma2 soma1 ) )
								(doseq [n (range(-(.size array)2))]
									(.add newArray (.get array n))
								)
								(.add newArray (str resultado))
								(def c(replace-first d "SUB" ""))
								(MP c newArray nil)
							)
						)		
					)

				)
			)
	)

)
;;Inicio execuÃ§Ã£o
(with-open [rdr (reader "outPut.txt")]
       ( def a (join "\n" ( line-seq rdr ) ) )       
)
(def number nil)
(def array (new java.util.ArrayList) )
(MP a array number)
